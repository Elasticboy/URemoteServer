// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directory_content.proto

#ifndef PROTOBUF_directory_5fcontent_2eproto__INCLUDED
#define PROTOBUF_directory_5fcontent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace network {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_directory_5fcontent_2eproto();
void protobuf_AssignDesc_directory_5fcontent_2eproto();
void protobuf_ShutdownFile_directory_5fcontent_2eproto();

class ProtoFile;
class ProtoDirContent;

enum ProtoFile_FileType {
  ProtoFile_FileType_DIRECTORY = 0,
  ProtoFile_FileType_FILE = 1,
  ProtoFile_FileType_VIDEO = 2
};
bool ProtoFile_FileType_IsValid(int value);
const ProtoFile_FileType ProtoFile_FileType_FileType_MIN = ProtoFile_FileType_DIRECTORY;
const ProtoFile_FileType ProtoFile_FileType_FileType_MAX = ProtoFile_FileType_VIDEO;
const int ProtoFile_FileType_FileType_ARRAYSIZE = ProtoFile_FileType_FileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoFile_FileType_descriptor();
inline const ::std::string& ProtoFile_FileType_Name(ProtoFile_FileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoFile_FileType_descriptor(), value);
}
inline bool ProtoFile_FileType_Parse(
    const ::std::string& name, ProtoFile_FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoFile_FileType>(
    ProtoFile_FileType_descriptor(), name, value);
}
// ===================================================================

class ProtoFile : public ::google::protobuf::Message {
 public:
  ProtoFile();
  virtual ~ProtoFile();
  
  ProtoFile(const ProtoFile& from);
  
  inline ProtoFile& operator=(const ProtoFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFile& default_instance();
  
  void Swap(ProtoFile* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFile& from);
  void MergeFrom(const ProtoFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ProtoFile_FileType FileType;
  static const FileType DIRECTORY = ProtoFile_FileType_DIRECTORY;
  static const FileType FILE = ProtoFile_FileType_FILE;
  static const FileType VIDEO = ProtoFile_FileType_VIDEO;
  static inline bool FileType_IsValid(int value) {
    return ProtoFile_FileType_IsValid(value);
  }
  static const FileType FileType_MIN =
    ProtoFile_FileType_FileType_MIN;
  static const FileType FileType_MAX =
    ProtoFile_FileType_FileType_MAX;
  static const int FileType_ARRAYSIZE =
    ProtoFile_FileType_FileType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FileType_descriptor() {
    return ProtoFile_FileType_descriptor();
  }
  static inline const ::std::string& FileType_Name(FileType value) {
    return ProtoFile_FileType_Name(value);
  }
  static inline bool FileType_Parse(const ::std::string& name,
      FileType* value) {
    return ProtoFile_FileType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // required .network.ProtoFile.FileType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::network::ProtoFile_FileType type() const;
  inline void set_type(::network::ProtoFile_FileType value);
  
  // required int32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:network.ProtoFile)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_size();
  inline void clear_has_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* path_;
  int type_;
  ::google::protobuf::int32 size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_directory_5fcontent_2eproto();
  friend void protobuf_AssignDesc_directory_5fcontent_2eproto();
  friend void protobuf_ShutdownFile_directory_5fcontent_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFile* default_instance_;
};
// -------------------------------------------------------------------

class ProtoDirContent : public ::google::protobuf::Message {
 public:
  ProtoDirContent();
  virtual ~ProtoDirContent();
  
  ProtoDirContent(const ProtoDirContent& from);
  
  inline ProtoDirContent& operator=(const ProtoDirContent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoDirContent& default_instance();
  
  void Swap(ProtoDirContent* other);
  
  // implements Message ----------------------------------------------
  
  ProtoDirContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoDirContent& from);
  void MergeFrom(const ProtoDirContent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .network.ProtoFile file = 1;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::network::ProtoFile& file(int index) const;
  inline ::network::ProtoFile* mutable_file(int index);
  inline ::network::ProtoFile* add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::network::ProtoFile >&
      file() const;
  inline ::google::protobuf::RepeatedPtrField< ::network::ProtoFile >*
      mutable_file();
  
  // @@protoc_insertion_point(class_scope:network.ProtoDirContent)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::network::ProtoFile > file_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_directory_5fcontent_2eproto();
  friend void protobuf_AssignDesc_directory_5fcontent_2eproto();
  friend void protobuf_ShutdownFile_directory_5fcontent_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoDirContent* default_instance_;
};
// ===================================================================


// ===================================================================

// ProtoFile

// required string name = 1;
inline bool ProtoFile::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFile::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFile::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFile::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoFile::name() const {
  return *name_;
}
inline void ProtoFile::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoFile::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoFile::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoFile::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoFile::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string path = 2;
inline bool ProtoFile::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFile::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFile::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFile::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ProtoFile::path() const {
  return *path_;
}
inline void ProtoFile::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ProtoFile::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ProtoFile::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoFile::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* ProtoFile::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .network.ProtoFile.FileType type = 3;
inline bool ProtoFile::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFile::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFile::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFile::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::network::ProtoFile_FileType ProtoFile::type() const {
  return static_cast< ::network::ProtoFile_FileType >(type_);
}
inline void ProtoFile::set_type(::network::ProtoFile_FileType value) {
  GOOGLE_DCHECK(::network::ProtoFile_FileType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 size = 4;
inline bool ProtoFile::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoFile::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoFile::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoFile::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 ProtoFile::size() const {
  return size_;
}
inline void ProtoFile::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// -------------------------------------------------------------------

// ProtoDirContent

// repeated .network.ProtoFile file = 1;
inline int ProtoDirContent::file_size() const {
  return file_.size();
}
inline void ProtoDirContent::clear_file() {
  file_.Clear();
}
inline const ::network::ProtoFile& ProtoDirContent::file(int index) const {
  return file_.Get(index);
}
inline ::network::ProtoFile* ProtoDirContent::mutable_file(int index) {
  return file_.Mutable(index);
}
inline ::network::ProtoFile* ProtoDirContent::add_file() {
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::network::ProtoFile >&
ProtoDirContent::file() const {
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::network::ProtoFile >*
ProtoDirContent::mutable_file() {
  return &file_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network::ProtoFile_FileType>() {
  return ::network::ProtoFile_FileType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_directory_5fcontent_2eproto__INCLUDED
