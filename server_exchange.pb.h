// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_exchange.proto

#ifndef PROTOBUF_server_5fexchange_2eproto__INCLUDED
#define PROTOBUF_server_5fexchange_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace network {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_5fexchange_2eproto();
void protobuf_AssignDesc_server_5fexchange_2eproto();
void protobuf_ShutdownFile_server_5fexchange_2eproto();

class Request;

enum Request_Type {
  Request_Type_SIMPLE = 0,
  Request_Type_EXPLORER = 1,
  Request_Type_KEYBOARD = 2,
  Request_Type_MEDIA = 3,
  Request_Type_AI = 4,
  Request_Type_VOLUME = 5,
  Request_Type_APP = 6
};
bool Request_Type_IsValid(int value);
const Request_Type Request_Type_Type_MIN = Request_Type_SIMPLE;
const Request_Type Request_Type_Type_MAX = Request_Type_APP;
const int Request_Type_Type_ARRAYSIZE = Request_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Type_descriptor();
inline const ::std::string& Request_Type_Name(Request_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Type_descriptor(), value);
}
inline bool Request_Type_Parse(
    const ::std::string& name, Request_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Type>(
    Request_Type_descriptor(), name, value);
}
enum Request_Code {
  Request_Code_DEFINE = 0,
  Request_Code_HELLO = 1,
  Request_Code_TEST = 2,
  Request_Code_KILL_SERVER = 3,
  Request_Code_SHUTDOWN = 4,
  Request_Code_SWITCH_WINDOW = 5,
  Request_Code_LOCK = 6,
  Request_Code_UP = 7,
  Request_Code_DOWN = 8,
  Request_Code_LEFT = 9,
  Request_Code_RIGHT = 10,
  Request_Code_MUTE = 11,
  Request_Code_SAY = 12,
  Request_Code_GET_FILE_LIST = 20,
  Request_Code_OPEN_DIR = 21,
  Request_Code_OPEN_FILE = 22,
  Request_Code_MEDIA_PLAY_PAUSE = 30,
  Request_Code_MEDIA_STOP = 31,
  Request_Code_MEDIA_PREVIOUS = 32,
  Request_Code_MEDIA_NEXT = 33,
  Request_Code_MEDIA_FF = 34,
  Request_Code_MEDIA_REWIND = 35,
  Request_Code_KB_RETURN = 40,
  Request_Code_KB_SPACE = 41,
  Request_Code_KB_BACKSPACE = 42,
  Request_Code_KB_ESCAPE = 43,
  Request_Code_KB_ALT_F4 = 44,
  Request_Code_KB_CTRL_RETURN = 45
};
bool Request_Code_IsValid(int value);
const Request_Code Request_Code_Code_MIN = Request_Code_DEFINE;
const Request_Code Request_Code_Code_MAX = Request_Code_KB_CTRL_RETURN;
const int Request_Code_Code_ARRAYSIZE = Request_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Code_descriptor();
inline const ::std::string& Request_Code_Name(Request_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Code_descriptor(), value);
}
inline bool Request_Code_Parse(
    const ::std::string& name, Request_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Code>(
    Request_Code_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();
  
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Request_Type Type;
  static const Type SIMPLE = Request_Type_SIMPLE;
  static const Type EXPLORER = Request_Type_EXPLORER;
  static const Type KEYBOARD = Request_Type_KEYBOARD;
  static const Type MEDIA = Request_Type_MEDIA;
  static const Type AI = Request_Type_AI;
  static const Type VOLUME = Request_Type_VOLUME;
  static const Type APP = Request_Type_APP;
  static inline bool Type_IsValid(int value) {
    return Request_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Request_Type_Type_MIN;
  static const Type Type_MAX =
    Request_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Request_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Request_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Request_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Request_Type_Parse(name, value);
  }
  
  typedef Request_Code Code;
  static const Code DEFINE = Request_Code_DEFINE;
  static const Code HELLO = Request_Code_HELLO;
  static const Code TEST = Request_Code_TEST;
  static const Code KILL_SERVER = Request_Code_KILL_SERVER;
  static const Code SHUTDOWN = Request_Code_SHUTDOWN;
  static const Code SWITCH_WINDOW = Request_Code_SWITCH_WINDOW;
  static const Code LOCK = Request_Code_LOCK;
  static const Code UP = Request_Code_UP;
  static const Code DOWN = Request_Code_DOWN;
  static const Code LEFT = Request_Code_LEFT;
  static const Code RIGHT = Request_Code_RIGHT;
  static const Code MUTE = Request_Code_MUTE;
  static const Code SAY = Request_Code_SAY;
  static const Code GET_FILE_LIST = Request_Code_GET_FILE_LIST;
  static const Code OPEN_DIR = Request_Code_OPEN_DIR;
  static const Code OPEN_FILE = Request_Code_OPEN_FILE;
  static const Code MEDIA_PLAY_PAUSE = Request_Code_MEDIA_PLAY_PAUSE;
  static const Code MEDIA_STOP = Request_Code_MEDIA_STOP;
  static const Code MEDIA_PREVIOUS = Request_Code_MEDIA_PREVIOUS;
  static const Code MEDIA_NEXT = Request_Code_MEDIA_NEXT;
  static const Code MEDIA_FF = Request_Code_MEDIA_FF;
  static const Code MEDIA_REWIND = Request_Code_MEDIA_REWIND;
  static const Code KB_RETURN = Request_Code_KB_RETURN;
  static const Code KB_SPACE = Request_Code_KB_SPACE;
  static const Code KB_BACKSPACE = Request_Code_KB_BACKSPACE;
  static const Code KB_ESCAPE = Request_Code_KB_ESCAPE;
  static const Code KB_ALT_F4 = Request_Code_KB_ALT_F4;
  static const Code KB_CTRL_RETURN = Request_Code_KB_CTRL_RETURN;
  static inline bool Code_IsValid(int value) {
    return Request_Code_IsValid(value);
  }
  static const Code Code_MIN =
    Request_Code_Code_MIN;
  static const Code Code_MAX =
    Request_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    Request_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return Request_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return Request_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return Request_Code_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .network.Request.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::network::Request_Type type() const;
  inline void set_type(::network::Request_Type value);
  
  // required .network.Request.Code code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::network::Request_Code code() const;
  inline void set_code(::network::Request_Code value);
  
  // optional int32 integer = 3;
  inline bool has_integer() const;
  inline void clear_integer();
  static const int kIntegerFieldNumber = 3;
  inline ::google::protobuf::int32 integer() const;
  inline void set_integer(::google::protobuf::int32 value);
  
  // optional string text = 4;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 4;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // @@protoc_insertion_point(class_scope:network.Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_integer();
  inline void clear_has_integer();
  inline void set_has_text();
  inline void clear_has_text();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  int code_;
  ::std::string* text_;
  ::google::protobuf::int32 integer_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fexchange_2eproto();
  friend void protobuf_AssignDesc_server_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_server_5fexchange_2eproto();
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required .network.Request.Type type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::network::Request_Type Request::type() const {
  return static_cast< ::network::Request_Type >(type_);
}
inline void Request::set_type(::network::Request_Type value) {
  GOOGLE_DCHECK(::network::Request_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .network.Request.Code code = 2;
inline bool Request::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::network::Request_Code Request::code() const {
  return static_cast< ::network::Request_Code >(code_);
}
inline void Request::set_code(::network::Request_Code value) {
  GOOGLE_DCHECK(::network::Request_Code_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional int32 integer = 3;
inline bool Request::has_integer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_integer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_integer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_integer() {
  integer_ = 0;
  clear_has_integer();
}
inline ::google::protobuf::int32 Request::integer() const {
  return integer_;
}
inline void Request::set_integer(::google::protobuf::int32 value) {
  set_has_integer();
  integer_ = value;
}

// optional string text = 4;
inline bool Request::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Request::text() const {
  return *text_;
}
inline void Request::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Request::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Request::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Request::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network::Request_Type>() {
  return ::network::Request_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network::Request_Code>() {
  return ::network::Request_Code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fexchange_2eproto__INCLUDED
