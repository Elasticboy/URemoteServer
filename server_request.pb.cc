// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace network {

namespace {

const ::google::protobuf::Descriptor* ProtoRequestSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRequestSimple_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoRequestSimple_SimpleParam_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProtoRequestExplorer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRequestExplorer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoRequestExplorer_ExplorerParam_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProtoRequestVolume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRequestVolume_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoRequestVolume_VolumeParam_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProtoRequestKeyboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRequestKeyboard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoRequestKeyboard_KeyboardEvent_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProtoRequestAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRequestAI_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoRequestAI_AIParam_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProtoRequestApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRequestApp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_5frequest_2eproto() {
  protobuf_AddDesc_server_5frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server_request.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoRequestSimple_descriptor_ = file->message_type(0);
  static const int ProtoRequestSimple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestSimple, param_),
  };
  ProtoRequestSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRequestSimple_descriptor_,
      ProtoRequestSimple::default_instance_,
      ProtoRequestSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRequestSimple));
  ProtoRequestSimple_SimpleParam_descriptor_ = ProtoRequestSimple_descriptor_->enum_type(0);
  ProtoRequestExplorer_descriptor_ = file->message_type(1);
  static const int ProtoRequestExplorer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestExplorer, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestExplorer, path_),
  };
  ProtoRequestExplorer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRequestExplorer_descriptor_,
      ProtoRequestExplorer::default_instance_,
      ProtoRequestExplorer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestExplorer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestExplorer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRequestExplorer));
  ProtoRequestExplorer_ExplorerParam_descriptor_ = ProtoRequestExplorer_descriptor_->enum_type(0);
  ProtoRequestVolume_descriptor_ = file->message_type(2);
  static const int ProtoRequestVolume_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestVolume, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestVolume, volume_),
  };
  ProtoRequestVolume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRequestVolume_descriptor_,
      ProtoRequestVolume::default_instance_,
      ProtoRequestVolume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestVolume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestVolume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRequestVolume));
  ProtoRequestVolume_VolumeParam_descriptor_ = ProtoRequestVolume_descriptor_->enum_type(0);
  ProtoRequestKeyboard_descriptor_ = file->message_type(3);
  static const int ProtoRequestKeyboard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestKeyboard, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestKeyboard, text_),
  };
  ProtoRequestKeyboard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRequestKeyboard_descriptor_,
      ProtoRequestKeyboard::default_instance_,
      ProtoRequestKeyboard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestKeyboard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestKeyboard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRequestKeyboard));
  ProtoRequestKeyboard_KeyboardEvent_descriptor_ = ProtoRequestKeyboard_descriptor_->enum_type(0);
  ProtoRequestAI_descriptor_ = file->message_type(4);
  static const int ProtoRequestAI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestAI, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestAI, text_),
  };
  ProtoRequestAI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRequestAI_descriptor_,
      ProtoRequestAI::default_instance_,
      ProtoRequestAI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestAI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestAI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRequestAI));
  ProtoRequestAI_AIParam_descriptor_ = ProtoRequestAI_descriptor_->enum_type(0);
  ProtoRequestApp_descriptor_ = file->message_type(5);
  static const int ProtoRequestApp_offsets_[1] = {
  };
  ProtoRequestApp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRequestApp_descriptor_,
      ProtoRequestApp::default_instance_,
      ProtoRequestApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestApp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequestApp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRequestApp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_5frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRequestSimple_descriptor_, &ProtoRequestSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRequestExplorer_descriptor_, &ProtoRequestExplorer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRequestVolume_descriptor_, &ProtoRequestVolume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRequestKeyboard_descriptor_, &ProtoRequestKeyboard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRequestAI_descriptor_, &ProtoRequestAI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRequestApp_descriptor_, &ProtoRequestApp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_5frequest_2eproto() {
  delete ProtoRequestSimple::default_instance_;
  delete ProtoRequestSimple_reflection_;
  delete ProtoRequestExplorer::default_instance_;
  delete ProtoRequestExplorer_reflection_;
  delete ProtoRequestVolume::default_instance_;
  delete ProtoRequestVolume_reflection_;
  delete ProtoRequestKeyboard::default_instance_;
  delete ProtoRequestKeyboard_reflection_;
  delete ProtoRequestAI::default_instance_;
  delete ProtoRequestAI_reflection_;
  delete ProtoRequestApp::default_instance_;
  delete ProtoRequestApp_reflection_;
}

void protobuf_AddDesc_server_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024server_request.proto\022\007network\"\254\001\n\022Prot"
    "oRequestSimple\0226\n\005param\030\001 \002(\0162\'.network."
    "ProtoRequestSimple.SimpleParam\"^\n\013Simple"
    "Param\022\t\n\005HELLO\020\000\022\010\n\004TEST\020\001\022\017\n\013KILL_SERVE"
    "R\020\002\022\014\n\010SHUTDOWN\020\003\022\021\n\rSWITCH_WINDOW\020\004\022\010\n\004"
    "LOCK\020\005\"\241\001\n\024ProtoRequestExplorer\022:\n\005param"
    "\030\001 \002(\0162+.network.ProtoRequestExplorer.Ex"
    "plorerParam\022\014\n\004path\030\002 \002(\t\"\?\n\rExplorerPar"
    "am\022\021\n\rGET_FILE_LIST\020\000\022\014\n\010OPEN_DIR\020\001\022\r\n\tO"
    "PEN_FILE\020\002\"\227\001\n\022ProtoRequestVolume\0226\n\005par"
    "am\030\001 \002(\0162\'.network.ProtoRequestVolume.Vo"
    "lumeParam\022\022\n\006volume\030\002 \001(\005:\00250\"5\n\013VolumeP"
    "aram\022\006\n\002UP\020\000\022\010\n\004DOWN\020\001\022\010\n\004MUTE\020\002\022\n\n\006DEFI"
    "NE\020\003\"\311\002\n\024ProtoRequestKeyboard\022:\n\005event\030\001"
    " \002(\0162+.network.ProtoRequestKeyboard.Keyb"
    "oardEvent\022\014\n\004text\030\002 \001(\t\"\346\001\n\rKeyboardEven"
    "t\022\024\n\020MEDIA_PLAY_PAUSE\020\000\022\016\n\nMEDIA_STOP\020\001\022"
    "\022\n\016MEDIA_PREVIOUS\020\002\022\016\n\nMEDIA_NEXT\020\003\022\014\n\010M"
    "EDIA_FF\020\004\022\020\n\014MEDIA_REWIND\020\005\022\r\n\tKB_RETURN"
    "\020\006\022\014\n\010KB_SPACE\020\007\022\020\n\014KB_BACKSPACE\020\010\022\r\n\tKB"
    "_ESCAPE\020\t\022\n\n\006DEFINE\020\n\022\r\n\tKB_ALT_F4\020\013\022\022\n\016"
    "KB_CTRL_RETURN\020\014\"l\n\016ProtoRequestAI\022.\n\005pa"
    "ram\030\001 \002(\0162\037.network.ProtoRequestAI.AIPar"
    "am\022\014\n\004text\030\002 \001(\t\"\034\n\007AIParam\022\010\n\004MUTE\020\000\022\007\n"
    "\003SAY\020\001\"\021\n\017ProtoRequestAppB%\n\016org.es.netw"
    "orkB\023ServerRequestProtos", 1024);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_request.proto", &protobuf_RegisterTypes);
  ProtoRequestSimple::default_instance_ = new ProtoRequestSimple();
  ProtoRequestExplorer::default_instance_ = new ProtoRequestExplorer();
  ProtoRequestVolume::default_instance_ = new ProtoRequestVolume();
  ProtoRequestKeyboard::default_instance_ = new ProtoRequestKeyboard();
  ProtoRequestAI::default_instance_ = new ProtoRequestAI();
  ProtoRequestApp::default_instance_ = new ProtoRequestApp();
  ProtoRequestSimple::default_instance_->InitAsDefaultInstance();
  ProtoRequestExplorer::default_instance_->InitAsDefaultInstance();
  ProtoRequestVolume::default_instance_->InitAsDefaultInstance();
  ProtoRequestKeyboard::default_instance_->InitAsDefaultInstance();
  ProtoRequestAI::default_instance_->InitAsDefaultInstance();
  ProtoRequestApp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_5frequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_5frequest_2eproto {
  StaticDescriptorInitializer_server_5frequest_2eproto() {
    protobuf_AddDesc_server_5frequest_2eproto();
  }
} static_descriptor_initializer_server_5frequest_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProtoRequestSimple_SimpleParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequestSimple_SimpleParam_descriptor_;
}
bool ProtoRequestSimple_SimpleParam_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProtoRequestSimple_SimpleParam ProtoRequestSimple::HELLO;
const ProtoRequestSimple_SimpleParam ProtoRequestSimple::TEST;
const ProtoRequestSimple_SimpleParam ProtoRequestSimple::KILL_SERVER;
const ProtoRequestSimple_SimpleParam ProtoRequestSimple::SHUTDOWN;
const ProtoRequestSimple_SimpleParam ProtoRequestSimple::SWITCH_WINDOW;
const ProtoRequestSimple_SimpleParam ProtoRequestSimple::LOCK;
const ProtoRequestSimple_SimpleParam ProtoRequestSimple::SimpleParam_MIN;
const ProtoRequestSimple_SimpleParam ProtoRequestSimple::SimpleParam_MAX;
const int ProtoRequestSimple::SimpleParam_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProtoRequestSimple::kParamFieldNumber;
#endif  // !_MSC_VER

ProtoRequestSimple::ProtoRequestSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRequestSimple::InitAsDefaultInstance() {
}

ProtoRequestSimple::ProtoRequestSimple(const ProtoRequestSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRequestSimple::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRequestSimple::~ProtoRequestSimple() {
  SharedDtor();
}

void ProtoRequestSimple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoRequestSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRequestSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequestSimple_descriptor_;
}

const ProtoRequestSimple& ProtoRequestSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5frequest_2eproto();  return *default_instance_;
}

ProtoRequestSimple* ProtoRequestSimple::default_instance_ = NULL;

ProtoRequestSimple* ProtoRequestSimple::New() const {
  return new ProtoRequestSimple;
}

void ProtoRequestSimple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRequestSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network.ProtoRequestSimple.SimpleParam param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ProtoRequestSimple_SimpleParam_IsValid(value)) {
            set_param(static_cast< ::network::ProtoRequestSimple_SimpleParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRequestSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network.ProtoRequestSimple.SimpleParam param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRequestSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network.ProtoRequestSimple.SimpleParam param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRequestSimple::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network.ProtoRequestSimple.SimpleParam param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRequestSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRequestSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRequestSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRequestSimple::MergeFrom(const ProtoRequestSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRequestSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRequestSimple::CopyFrom(const ProtoRequestSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRequestSimple::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoRequestSimple::Swap(ProtoRequestSimple* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRequestSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRequestSimple_descriptor_;
  metadata.reflection = ProtoRequestSimple_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProtoRequestExplorer_ExplorerParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequestExplorer_ExplorerParam_descriptor_;
}
bool ProtoRequestExplorer_ExplorerParam_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProtoRequestExplorer_ExplorerParam ProtoRequestExplorer::GET_FILE_LIST;
const ProtoRequestExplorer_ExplorerParam ProtoRequestExplorer::OPEN_DIR;
const ProtoRequestExplorer_ExplorerParam ProtoRequestExplorer::OPEN_FILE;
const ProtoRequestExplorer_ExplorerParam ProtoRequestExplorer::ExplorerParam_MIN;
const ProtoRequestExplorer_ExplorerParam ProtoRequestExplorer::ExplorerParam_MAX;
const int ProtoRequestExplorer::ExplorerParam_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProtoRequestExplorer::kParamFieldNumber;
const int ProtoRequestExplorer::kPathFieldNumber;
#endif  // !_MSC_VER

ProtoRequestExplorer::ProtoRequestExplorer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRequestExplorer::InitAsDefaultInstance() {
}

ProtoRequestExplorer::ProtoRequestExplorer(const ProtoRequestExplorer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRequestExplorer::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRequestExplorer::~ProtoRequestExplorer() {
  SharedDtor();
}

void ProtoRequestExplorer::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRequestExplorer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRequestExplorer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequestExplorer_descriptor_;
}

const ProtoRequestExplorer& ProtoRequestExplorer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5frequest_2eproto();  return *default_instance_;
}

ProtoRequestExplorer* ProtoRequestExplorer::default_instance_ = NULL;

ProtoRequestExplorer* ProtoRequestExplorer::New() const {
  return new ProtoRequestExplorer;
}

void ProtoRequestExplorer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRequestExplorer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network.ProtoRequestExplorer.ExplorerParam param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ProtoRequestExplorer_ExplorerParam_IsValid(value)) {
            set_param(static_cast< ::network::ProtoRequestExplorer_ExplorerParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRequestExplorer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network.ProtoRequestExplorer.ExplorerParam param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->param(), output);
  }
  
  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRequestExplorer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network.ProtoRequestExplorer.ExplorerParam param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->param(), target);
  }
  
  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRequestExplorer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network.ProtoRequestExplorer.ExplorerParam param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }
    
    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRequestExplorer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRequestExplorer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRequestExplorer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRequestExplorer::MergeFrom(const ProtoRequestExplorer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRequestExplorer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRequestExplorer::CopyFrom(const ProtoRequestExplorer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRequestExplorer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProtoRequestExplorer::Swap(ProtoRequestExplorer* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRequestExplorer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRequestExplorer_descriptor_;
  metadata.reflection = ProtoRequestExplorer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProtoRequestVolume_VolumeParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequestVolume_VolumeParam_descriptor_;
}
bool ProtoRequestVolume_VolumeParam_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProtoRequestVolume_VolumeParam ProtoRequestVolume::UP;
const ProtoRequestVolume_VolumeParam ProtoRequestVolume::DOWN;
const ProtoRequestVolume_VolumeParam ProtoRequestVolume::MUTE;
const ProtoRequestVolume_VolumeParam ProtoRequestVolume::DEFINE;
const ProtoRequestVolume_VolumeParam ProtoRequestVolume::VolumeParam_MIN;
const ProtoRequestVolume_VolumeParam ProtoRequestVolume::VolumeParam_MAX;
const int ProtoRequestVolume::VolumeParam_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProtoRequestVolume::kParamFieldNumber;
const int ProtoRequestVolume::kVolumeFieldNumber;
#endif  // !_MSC_VER

ProtoRequestVolume::ProtoRequestVolume()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRequestVolume::InitAsDefaultInstance() {
}

ProtoRequestVolume::ProtoRequestVolume(const ProtoRequestVolume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRequestVolume::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0;
  volume_ = 50;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRequestVolume::~ProtoRequestVolume() {
  SharedDtor();
}

void ProtoRequestVolume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoRequestVolume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRequestVolume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequestVolume_descriptor_;
}

const ProtoRequestVolume& ProtoRequestVolume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5frequest_2eproto();  return *default_instance_;
}

ProtoRequestVolume* ProtoRequestVolume::default_instance_ = NULL;

ProtoRequestVolume* ProtoRequestVolume::New() const {
  return new ProtoRequestVolume;
}

void ProtoRequestVolume::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0;
    volume_ = 50;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRequestVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network.ProtoRequestVolume.VolumeParam param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ProtoRequestVolume_VolumeParam_IsValid(value)) {
            set_param(static_cast< ::network::ProtoRequestVolume_VolumeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_volume;
        break;
      }
      
      // optional int32 volume = 2 [default = 50];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRequestVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network.ProtoRequestVolume.VolumeParam param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->param(), output);
  }
  
  // optional int32 volume = 2 [default = 50];
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->volume(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRequestVolume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network.ProtoRequestVolume.VolumeParam param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->param(), target);
  }
  
  // optional int32 volume = 2 [default = 50];
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->volume(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRequestVolume::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network.ProtoRequestVolume.VolumeParam param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }
    
    // optional int32 volume = 2 [default = 50];
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRequestVolume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRequestVolume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRequestVolume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRequestVolume::MergeFrom(const ProtoRequestVolume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRequestVolume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRequestVolume::CopyFrom(const ProtoRequestVolume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRequestVolume::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoRequestVolume::Swap(ProtoRequestVolume* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(volume_, other->volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRequestVolume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRequestVolume_descriptor_;
  metadata.reflection = ProtoRequestVolume_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProtoRequestKeyboard_KeyboardEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequestKeyboard_KeyboardEvent_descriptor_;
}
bool ProtoRequestKeyboard_KeyboardEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::MEDIA_PLAY_PAUSE;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::MEDIA_STOP;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::MEDIA_PREVIOUS;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::MEDIA_NEXT;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::MEDIA_FF;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::MEDIA_REWIND;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::KB_RETURN;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::KB_SPACE;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::KB_BACKSPACE;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::KB_ESCAPE;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::DEFINE;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::KB_ALT_F4;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::KB_CTRL_RETURN;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::KeyboardEvent_MIN;
const ProtoRequestKeyboard_KeyboardEvent ProtoRequestKeyboard::KeyboardEvent_MAX;
const int ProtoRequestKeyboard::KeyboardEvent_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProtoRequestKeyboard::kEventFieldNumber;
const int ProtoRequestKeyboard::kTextFieldNumber;
#endif  // !_MSC_VER

ProtoRequestKeyboard::ProtoRequestKeyboard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRequestKeyboard::InitAsDefaultInstance() {
}

ProtoRequestKeyboard::ProtoRequestKeyboard(const ProtoRequestKeyboard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRequestKeyboard::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRequestKeyboard::~ProtoRequestKeyboard() {
  SharedDtor();
}

void ProtoRequestKeyboard::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRequestKeyboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRequestKeyboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequestKeyboard_descriptor_;
}

const ProtoRequestKeyboard& ProtoRequestKeyboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5frequest_2eproto();  return *default_instance_;
}

ProtoRequestKeyboard* ProtoRequestKeyboard::default_instance_ = NULL;

ProtoRequestKeyboard* ProtoRequestKeyboard::New() const {
  return new ProtoRequestKeyboard;
}

void ProtoRequestKeyboard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRequestKeyboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network.ProtoRequestKeyboard.KeyboardEvent event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ProtoRequestKeyboard_KeyboardEvent_IsValid(value)) {
            set_event(static_cast< ::network::ProtoRequestKeyboard_KeyboardEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }
      
      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRequestKeyboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network.ProtoRequestKeyboard.KeyboardEvent event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }
  
  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRequestKeyboard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network.ProtoRequestKeyboard.KeyboardEvent event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }
  
  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRequestKeyboard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network.ProtoRequestKeyboard.KeyboardEvent event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }
    
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRequestKeyboard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRequestKeyboard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRequestKeyboard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRequestKeyboard::MergeFrom(const ProtoRequestKeyboard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRequestKeyboard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRequestKeyboard::CopyFrom(const ProtoRequestKeyboard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRequestKeyboard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoRequestKeyboard::Swap(ProtoRequestKeyboard* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRequestKeyboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRequestKeyboard_descriptor_;
  metadata.reflection = ProtoRequestKeyboard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProtoRequestAI_AIParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequestAI_AIParam_descriptor_;
}
bool ProtoRequestAI_AIParam_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProtoRequestAI_AIParam ProtoRequestAI::MUTE;
const ProtoRequestAI_AIParam ProtoRequestAI::SAY;
const ProtoRequestAI_AIParam ProtoRequestAI::AIParam_MIN;
const ProtoRequestAI_AIParam ProtoRequestAI::AIParam_MAX;
const int ProtoRequestAI::AIParam_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProtoRequestAI::kParamFieldNumber;
const int ProtoRequestAI::kTextFieldNumber;
#endif  // !_MSC_VER

ProtoRequestAI::ProtoRequestAI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRequestAI::InitAsDefaultInstance() {
}

ProtoRequestAI::ProtoRequestAI(const ProtoRequestAI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRequestAI::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRequestAI::~ProtoRequestAI() {
  SharedDtor();
}

void ProtoRequestAI::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRequestAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRequestAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequestAI_descriptor_;
}

const ProtoRequestAI& ProtoRequestAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5frequest_2eproto();  return *default_instance_;
}

ProtoRequestAI* ProtoRequestAI::default_instance_ = NULL;

ProtoRequestAI* ProtoRequestAI::New() const {
  return new ProtoRequestAI;
}

void ProtoRequestAI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRequestAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network.ProtoRequestAI.AIParam param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::ProtoRequestAI_AIParam_IsValid(value)) {
            set_param(static_cast< ::network::ProtoRequestAI_AIParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }
      
      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRequestAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network.ProtoRequestAI.AIParam param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->param(), output);
  }
  
  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRequestAI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network.ProtoRequestAI.AIParam param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->param(), target);
  }
  
  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRequestAI::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network.ProtoRequestAI.AIParam param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }
    
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRequestAI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRequestAI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRequestAI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRequestAI::MergeFrom(const ProtoRequestAI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRequestAI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRequestAI::CopyFrom(const ProtoRequestAI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRequestAI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoRequestAI::Swap(ProtoRequestAI* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRequestAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRequestAI_descriptor_;
  metadata.reflection = ProtoRequestAI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProtoRequestApp::ProtoRequestApp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRequestApp::InitAsDefaultInstance() {
}

ProtoRequestApp::ProtoRequestApp(const ProtoRequestApp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRequestApp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRequestApp::~ProtoRequestApp() {
  SharedDtor();
}

void ProtoRequestApp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoRequestApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRequestApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequestApp_descriptor_;
}

const ProtoRequestApp& ProtoRequestApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5frequest_2eproto();  return *default_instance_;
}

ProtoRequestApp* ProtoRequestApp::default_instance_ = NULL;

ProtoRequestApp* ProtoRequestApp::New() const {
  return new ProtoRequestApp;
}

void ProtoRequestApp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRequestApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProtoRequestApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRequestApp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRequestApp::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRequestApp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRequestApp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRequestApp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRequestApp::MergeFrom(const ProtoRequestApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRequestApp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRequestApp::CopyFrom(const ProtoRequestApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRequestApp::IsInitialized() const {
  
  return true;
}

void ProtoRequestApp::Swap(ProtoRequestApp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRequestApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRequestApp_descriptor_;
  metadata.reflection = ProtoRequestApp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)
